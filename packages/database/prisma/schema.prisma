// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model Users {
  id    String   @id @default(uuid())
  role        String
  first_name  String
  last_name   String
  email       String   @unique
  password    String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  courses     Courses[]
  submissions Submissions[]
  sections    Sections[]
  comments    Comments[]
}

model Courses {
  id          String   @id @default(uuid())
  user        Users    @relation(fields: [users_id], references: [id])
  users_id    String
  course_name String
  course_desc String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  assignments Assignments[]
  sections    Sections[]
}

model Sections {
  id           String   @id @default(uuid())
  course       Courses  @relation(fields: [course_id], references: [id])
  course_id    String
  user         Users    @relation(fields: [users_id], references: [id])
  users_id     String
  section_code String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

}

model Assignments {
  id            String   @id @default(uuid())
  course        Courses  @relation(fields: [courses_id], references: [id])
  courses_id    String
  assign_name   String
  assign_desc   String
  assign_files  Bytes?
  due_date      DateTime
  completed     Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  submissions   Submissions[]
}

model Submissions {
  id              String   @id @default(uuid())
  assignment      Assignments @relation(fields: [assign_id], references: [id])
  assign_id       String
  user            Users      @relation(fields: [user_id], references: [id])
  user_id         String
  submission_file Bytes?
  submission_desc String?
  submission_time DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  comments        Comments[]
}

model Comments {
  id      String   @id @default(uuid())
  submission      Submissions @relation(fields: [submission_id], references: [id])
  submission_id   String
  user            Users      @relation(fields: [user_id], references: [id])
  user_id         String
  comment_desc    String
  comment_time    DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

}